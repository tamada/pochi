name: Publish Web Page, and Docker Image, and Release.
on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  publish:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release/v') && github.event.pull_request.merged == true
    env:
      REPO: https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git
    steps:
      # Checkout the project, and get tag name.
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Initialize git
        shell: bash
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Get tag name
        id: vars
        run: |
          HEAD_REF=${{ github.head_ref }}
          echo "::set-output name=tag::${HEAD_REF##*/v}"

      # setup java, hugo, and docker.
      - name: Set up JDK 11 for pochi core libraries
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.85.0'
          # extended: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

# Build packages, site
      - name: Build
        run: |
          bash ./bin/setup_project.sh
          mvn package
          mkdir lib
          cp */target/*.jar lib

      - name: Build Site
        run: |
          bash ./bin/build_site.sh

      - name: Publish Site
        run: |
          git worktree list
          git -C site/public push origin gh-pages

      - name: Build Dist
        run:
          bash ./bin/make_dist.sh

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.vars.outputs.tag }}
          release_name: Release v${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false

# Publish release
      - name: Upload release assets
        id: upload-release-assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: ./dist/pochi-${{ steps.vars.outputs.tag }}.zip
          asset_name: pochi-${{ steps.vars.outputs.tag }}.zip
          asset_content_type: application/zip
          upload_url: ${{ steps.create_release.outputs.upload_url }}

# Publish Docker image to ghcr.io
      - name: Deploy GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site/public

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Images (without Groovy)
        uses: docker/build-push-action@v2
        with:
          context: dockers/pochi
          push: true
          tags: |
            ghcr.io/tamada/pochi:${{ steps.vars.outputs.tag }}
            ghcr.io/tamada/pochi:latest

      - name: Push Docker Images (with Groovy)
        uses: docker/build-push-action@v2
        with:
          context: dockers/pochi-groovysh
          push: true
          tags: |
            ghcr.io/tamada/pochi-groovysh:${{ steps.vars.outputs.tag }}
            ghcr.io/tamada/pochi-groovysh:latest
